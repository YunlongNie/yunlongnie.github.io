<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | A place for notes]]></title>
  <link href="http://YunlongNie.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://YunlongNie.github.io/"/>
  <updated>2014-10-17T20:33:57-07:00</updated>
  <id>http://YunlongNie.github.io/</id>
  <author>
    <name><![CDATA[Ben(Yunlong)]]></name>
    <email><![CDATA[nyunlong@sfu.ca]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chapter 4 Bulid Functional Data Objects]]></title>
    <link href="http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects/"/>
    <updated>2014-10-16T22:44:57-07:00</updated>
    <id>http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects</id>
    <content type="html"><![CDATA[<h1 id="object-of-the-functional-data-class-fd-in-r">object of the <em>functional data</em> class <code>fd</code> in R</h1>

<p>An object of fd combines the coefficients with the basis system. In the previous post, we learned that <code>create.bspline.basis</code> entable one create a system of bsplines. The object class is <strong>fdbasis</strong>. </p>

<h2 id="add-coefficients-to-the-fdbasis-to-obtain-a-functional-data-object-fd">add coefficients to the <strong>fdbasis</strong> to obtain a functional data object <strong>fd</strong>.</h2>

<p>Use the function <code>fd()</code> in R. </p>

<p>&#8220;`
tempfd = fd(coefmat,bspline_temp)</p>

<p>&#8220;`</p>

<p>Note that adding coefficients in is different from evaluate a bspline system at a given time point $t$. Suppose $f(x)$ is approximated by a bspline system with basis functions denoted by $\phi_i(x)$. That is, 
<script type="math/tex">f(x) \approx \sum_{i=1}^m \beta_i \phi_i(x). </script></p>

<p>Thus, evaluating $f(t)$ means that given $t = t_0$ compute $f(t_0)$, which is essentially a vector. Each element in the vector stands for the basis function value when $t = t_0$, i.e., $\phi_i(t_0)$. On the other hand, supply coefficients into the bspline system amounts to given the value of $\beta_i$.  Once the coefficients are given, one can evaluate the smoothing system as a single function given $t=t_0$ using R function <code>eval.fd()</code>. </p>

<p><code>R
unitRng = c(0,1)
bspl2 = create.bspline.basis(unitRng, norder=2)
tstFn1 = fd(c(-1, 2), bspl2)
t0 = seq(0,1,by=0.2)
eval.fd(t0,tstFn1)
     reps 1
[1,]   -1.0
[2,]   -0.4
[3,]    0.2
[4,]    0.8
[5,]    1.4
[6,]    2.0
&gt; eval.fd(t0,tstFn1,1) # evaluate the function data object tstFn1 first derivative. 
     reps 1
[1,]      3
[2,]      3
[3,]      3
[4,]      3
[5,]      3
[6,]      0
</code></p>

]]></content>
  </entry>
  
</feed>
