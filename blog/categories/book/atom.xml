<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book | A place for notes]]></title>
  <link href="http://YunlongNie.github.io/blog/categories/book/atom.xml" rel="self"/>
  <link href="http://YunlongNie.github.io/"/>
  <updated>2014-10-19T20:28:21-07:00</updated>
  <id>http://YunlongNie.github.io/</id>
  <author>
    <name><![CDATA[Ben(Yunlong)]]></name>
    <email><![CDATA[nyunlong@sfu.ca]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chapter 5 estimating coefficients from real data]]></title>
    <link href="http://YunlongNie.github.io/blog/2014/10/19/chapter-5-estimating-ceofficients-from-real-data/"/>
    <updated>2014-10-19T20:11:11-07:00</updated>
    <id>http://YunlongNie.github.io/blog/2014/10/19/chapter-5-estimating-ceofficients-from-real-data</id>
    <content type="html"><![CDATA[<h2 id="regression-approach">regression approach</h2>
<p>This is basically using least square to estimate the coefficients of spline functions. </p>

<p><script type="math/tex">y_ j = x(t_j) + \epsilon_j = \phi'(t_j) \mathbf{c} + \epsilon_j,</script>
Then <script type="math/tex">\mathbf{y}  = \mathbf{\Phi} \mathbf{c} + \mathbf{\epsilon}</script> 
and <script type="math/tex">\hat{\mathbf{c}} = (\Phi'\Phi)^{-1} \Phi' \mathbf{y}.</script></p>

<p>We can use simple R functions <code>lsfit</code> to estimate the $\Phi$ as follows:</p>

<p>&#8220;`R
#  define the range
Rng  = c(1,18)
age     = growth$age
agefine = seq(1,18,len=501)
#  set up order 6 spline basis with 12 basis functions for
#  fitting the growth data so as to estimate acceleration
nbasis = 12;
norder =  6;
heightbasis12 = create.bspline.basis(ageRng, nbasis, norder)
#  fit the data by least squares
basismat   = eval.basis(age, heightbasis12)
heightmat  = growth$hgtf
heightcoef = lsfit(basismat, heightmat, intercept=FALSE)$coef</p>

<h1 id="heightcoef-is-a-12--54-matrix-each-column-represents-the-coefficients-for-12-basis-functions-for-each-boy">heightcoef is a 12 * 54 matrix. Each column represents the coefficients for 12 basis functions for each boy.</h1>
<p>&#8220;`</p>

<p>Or there is a function in the <strong>fda</strong> package: <code>smooth.basis</code>. This function takes three arguments, $t_j, y_j$ and $\Phi$. That is, the support of the responses, the responses and the bspline basis system. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chapter 4 Bulid Functional Data Objects]]></title>
    <link href="http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects/"/>
    <updated>2014-10-16T22:44:57-07:00</updated>
    <id>http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects</id>
    <content type="html"><![CDATA[<h1 id="object-of-the-functional-data-class-fd-in-r">object of the <em>functional data</em> class <code>fd</code> in R</h1>

<p>An object of fd combines the coefficients with the basis system. In the previous post, we learned that <code>create.bspline.basis</code> entable one create a system of bsplines. The object class is <strong>fdbasis</strong>. </p>

<h2 id="add-coefficients-to-the-fdbasis-to-obtain-a-functional-data-object-fd">add coefficients to the <strong>fdbasis</strong> to obtain a functional data object <strong>fd</strong>.</h2>

<p>Use the function <code>fd()</code> in R. </p>

<p>&#8220;`
tempfd = fd(coefmat,bspline_temp)</p>

<p>&#8220;`</p>

<p>Note that adding coefficients in is different from evaluate a bspline system at a given time point $t$. Suppose $f(x)$ is approximated by a bspline system with basis functions denoted by $\phi_i(x)$. That is, 
<script type="math/tex">f(x) \approx \sum_{i=1}^m \beta_i \phi_i(x). </script></p>

<p>Thus, evaluating $f(t)$ means that given $t = t_0$ compute $f(t_0)$, which is essentially a vector. Each element in the vector stands for the basis function value when $t = t_0$, i.e., $\phi_i(t_0)$. On the other hand, supply coefficients into the bspline system amounts to given the value of $\beta_i$.  Once the coefficients are given, one can evaluate the smoothing system as a single function given $t=t_0$ using R function <code>eval.fd()</code>. </p>

<p><code>R
unitRng = c(0,1)
bspl2 = create.bspline.basis(unitRng, norder=2)
tstFn1 = fd(c(-1, 2), bspl2)
t0 = seq(0,1,by=0.2)
eval.fd(t0,tstFn1)
     reps 1
[1,]   -1.0
[2,]   -0.4
[3,]    0.2
[4,]    0.8
[5,]    1.4
[6,]    2.0
&gt; eval.fd(t0,tstFn1,1) # evaluate the function data object tstFn1 first derivative. 
     reps 1
[1,]      3
[2,]      3
[3,]      3
[4,]      3
[5,]      3
[6,]      0
</code></p>

<h2 id="linear-differential-operator-or-lfd-class">Linear Differential Operator or <em>Lfd</em> Class</h2>

<p>The notation $Lx$ refers to the application of a linear differential operator L to a function $x$. In general, 
<script type="math/tex">Lx(t) = \beta_0(t) x(t) + \beta_1(t) Dx(t) + \ldots + \beta_{m-1}(t) D^{m-1} x(t)+ D^{m} x(t) </script></p>

]]></content>
  </entry>
  
</feed>
