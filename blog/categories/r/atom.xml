<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: r | A place for notes]]></title>
  <link href="http://YunlongNie.github.io/blog/categories/r/atom.xml" rel="self"/>
  <link href="http://YunlongNie.github.io/"/>
  <updated>2014-10-17T20:57:56-07:00</updated>
  <id>http://YunlongNie.github.io/</id>
  <author>
    <name><![CDATA[Ben(Yunlong)]]></name>
    <email><![CDATA[nyunlong@sfu.ca]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Chapter 4 Bulid Functional Data Objects]]></title>
    <link href="http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects/"/>
    <updated>2014-10-16T22:44:57-07:00</updated>
    <id>http://YunlongNie.github.io/blog/2014/10/16/chapter-4-bulid-functional-data-objects</id>
    <content type="html"><![CDATA[<h1 id="object-of-the-functional-data-class-fd-in-r">object of the <em>functional data</em> class <code>fd</code> in R</h1>

<p>An object of fd combines the coefficients with the basis system. In the previous post, we learned that <code>create.bspline.basis</code> entable one create a system of bsplines. The object class is <strong>fdbasis</strong>. </p>

<h2 id="add-coefficients-to-the-fdbasis-to-obtain-a-functional-data-object-fd">add coefficients to the <strong>fdbasis</strong> to obtain a functional data object <strong>fd</strong>.</h2>

<p>Use the function <code>fd()</code> in R. </p>

<p>&#8220;`
tempfd = fd(coefmat,bspline_temp)</p>

<p>&#8220;`</p>

<p>Note that adding coefficients in is different from evaluate a bspline system at a given time point $t$. Suppose $f(x)$ is approximated by a bspline system with basis functions denoted by $\phi_i(x)$. That is, 
<script type="math/tex">f(x) \approx \sum_{i=1}^m \beta_i \phi_i(x). </script></p>

<p>Thus, evaluating $f(t)$ means that given $t = t_0$ compute $f(t_0)$, which is essentially a vector. Each element in the vector stands for the basis function value when $t = t_0$, i.e., $\phi_i(t_0)$. On the other hand, supply coefficients into the bspline system amounts to given the value of $\beta_i$.  Once the coefficients are given, one can evaluate the smoothing system as a single function given $t=t_0$ using R function <code>eval.fd()</code>. </p>

<p><code>R
unitRng = c(0,1)
bspl2 = create.bspline.basis(unitRng, norder=2)
tstFn1 = fd(c(-1, 2), bspl2)
t0 = seq(0,1,by=0.2)
eval.fd(t0,tstFn1)
     reps 1
[1,]   -1.0
[2,]   -0.4
[3,]    0.2
[4,]    0.8
[5,]    1.4
[6,]    2.0
&gt; eval.fd(t0,tstFn1,1) # evaluate the function data object tstFn1 first derivative. 
     reps 1
[1,]      3
[2,]      3
[3,]      3
[4,]      3
[5,]      3
[6,]      0
</code></p>

<h2 id="linear-differential-operator-or-lfd-class">Linear Differential Operator or <em>Lfd</em> Class</h2>

<p>The notation $Lx$ refers to the application of a linear differential operator L to a function $x$. In general, 
<script type="math/tex">Lx(t) = \beta_0(t) x(t) + \beta_1(t) Dx(t) + \ldots + \beta_{m-1}(t) D^{m-1} x(t)+ D^{m} x(t) </script></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chapter 3 fdaWithRMat]]></title>
    <link href="http://YunlongNie.github.io/blog/2014/10/16/chapter-3-fdawithrmat/"/>
    <updated>2014-10-16T21:51:57-07:00</updated>
    <id>http://YunlongNie.github.io/blog/2014/10/16/chapter-3-fdawithrmat</id>
    <content type="html"><![CDATA[<h1 id="create-bspline-basis-functions">create bspline basis functions</h1>

<p>There are normally four relevant arguments that defines a bspline basis system. </p>

<ol>
  <li>rangeval: gives the range of the bspline functions</li>
  <li>nbasis: the number of basis functions in total</li>
  <li>norder: the order of the bspline, which equals one plus the degree. the default is set to be 4, i.e., cubic splines</li>
  <li>breaks: the breaking points. It must satisfy that the first and last breaks are the boundary of the rangeval. For example, the code below specifies a bspline system with 13 basis functions. Each basis function is a cubic polynomial function. </li>
  <li>In fact, one <strong>only</strong> needs to gives breaks and norder, then the function will know the nbasis, since nbasis = order + number of internal knots.</li>
</ol>

<p><code>
bspline_temp = create.bspline.basis(rangeval = c(0,10), nbasis = 13,norder=4,breaks = 0:10)
</code></p>

<ol>
  <li>one property of bspline basis system is that the sum of B-spline basis function at any given time t sum up to 1. </li>
</ol>

<h1 id="evaluate-bspline-system-at-given-time-points">evaluate bspline system at given time points</h1>

<p>Once the bspline system is created, one might be interested in checking each basis function values at a given time t. This can be achieved by <code>eval.basis</code> function in R. It also computes derivatives when a third argument <code>Lfdobj</code> is given. In R, <code>predict</code> function can also do the same thing. </p>

<p>&#8220;`R
eval.basis(evalarg=1:3,bspline_temp)
eval.basis(evalarg=1:3,bspline_temp)[,1:6]
     bspl4.1 bspl4.2   bspl4.3   bspl4.4   bspl4.5   bspl4.6
[1,]       0    0.25 0.5833333 0.1666667 0.0000000 0.0000000
[2,]       0    0.00 0.1666667 0.6666667 0.1666667 0.0000000
[3,]       0    0.00 0.0000000 0.1666667 0.6666667 0.1666667
rowSums(eval.basis(evalarg=1:3,bspline_temp))
[1] 1 1 1
eval.basis(evalarg=1:3,bspline_temp,Lfdobj=1)
     bspl4.1 bspl4.2 bspl4.3 bspl4.4 bspl4.5 bspl4.6 bspl4.7 bspl4.8
[1,]       0   -0.75    0.25     0.5     0.0     0.0       0       0
[2,]       0    0.00   -0.50     0.0     0.5     0.0       0       0
[3,]       0    0.00    0.00    -0.5     0.0     0.5       0       0
# using predict function
&gt; predict(bspline_temp,1:3,1)
     bspl4.1 bspl4.2 bspl4.3 bspl4.4 bspl4.5 bspl4.6 bspl4.7 bspl4.8
[1,]       0   -0.75    0.25     0.5     0.0     0.0       0       0
[2,]       0    0.00   -0.50     0.0     0.5     0.0       0       0
[3,]       0    0.00    0.00    -0.5     0.0     0.5       0       0</p>

<p>&#8220;`</p>

]]></content>
  </entry>
  
</feed>
